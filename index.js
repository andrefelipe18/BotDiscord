const Discord = require("discord.js"); // Importa a biblioteca discord.js
const config = require("./config.json"); // Importa as configuraÃ§Ãµes do bot do arquivo config.json

//Model de Post
const Post = require("./Model/Post.js");

//Importando as interaÃ§Ãµes do bot
const statusPostado = require("./Interactions/alterar_status/statusPostado.js");
const statusPendente = require("./Interactions/alterar_status/statusPendente.js");
const excluirPost = require("./Interactions/PostCRUD/excluirPost.js");
const abrirFormPost = require("./Interactions/PostCRUD/abrirFormPost.js");
const enviarFormPost = require("./Interactions/PostCRUD/enviarFormPost.js");

// Cria uma nova instÃ¢ncia do cliente discord
const client = new Discord.Client({
  intents: [ 
    Discord.GatewayIntentBits.Guilds  // Define as intenÃ§Ãµes que o bot tem ao se conectar ao servidor do Discord
  ]
});

// Exporta o cliente para ser utilizado em outros arquivos do projeto
module.exports = client; 


// Cria um ouvinte para a interaÃ§Ã£o do usuÃ¡rio com o bot
client.on('interactionCreate', (interaction) => { 

  // Verifica se a interaÃ§Ã£o Ã© do tipo ApplicationCommand
  if(interaction.type === Discord.InteractionType.ApplicationCommand){ 

      // ObtÃ©m o comando correspondente ao nome da interaÃ§Ã£o
      const cmd = client.slashCommands.get(interaction.commandName); 

      // Verifica se o comando foi encontrado
      if (!cmd) return interaction.reply(`Error`); 

      // ObtÃ©m informaÃ§Ãµes do membro que interagiu com o bot
      interaction["member"] = interaction.guild.members.cache.get(interaction.user.id); 

      // Executa o comando correspondente
      cmd.run(client, interaction); 

   }
});

//Modal de criaÃ§Ã£o de Post
client.on("interactionCreate", async(interaction) => {
  if (interaction.isButton()) {

    //FunÃ§Ã£o para abrir o modal de criaÃ§Ã£o de post
    abrirFormPost(interaction);

  } else if (interaction.isModalSubmit()) {
    
    //FunÃ§Ã£o para enviar o form de criaÃ§Ã£o de post
    enviarFormPost(interaction);
  }
})

//InteraÃ§Ã£o de clicar no botÃ£o de alternar status para "postado"
client.on('interactionCreate', async (interaction) => { 
  if (interaction.isButton()) { 

    //Chama a funÃ§Ã£o de alternar o status do post
    statusPostado(interaction);
  }
});

//InteraÃ§Ã£o de clicar no botÃ£o de alternar status para "pendente"
client.on('interactionCreate', async (interaction) => { 
  if (interaction.isButton()) { 
   
    //Chama a funÃ§Ã£o de alternar o status do post
    statusPendente(interaction);
  }
});

//InteraÃ§Ã£o de excluir post
client.on('interactionCreate', async (interaction) => {  
  if (interaction.isButton()) { 

    //Chama a funÃ§Ã£o de excluir Post
    excluirPost(interaction, client);
  }
});

// Cria um ouvinte para o evento de inicializaÃ§Ã£o do bot
client.on('ready', () => { 
  console.log(`ğŸ”¥ Estou online em ${client.user.username}!`); // Exibe uma mensagem no console informando que o bot estÃ¡ online

  // Toda vez que o bot for inicializado, ele irÃ¡ mandar uma mensagem no canal "bot"
  let idCanal = "1077309897542205500"; // ID do canal

  // ObtÃ©m o canal pelo ID
  let canal = client.channels.cache.get(idCanal);

  //Verifica se jÃ¡ existe uma mensagem no canal
  canal.messages.fetch({ limit: 1 }).then((messages) => {
    messages.forEach((message) => {
      message.delete();
    });
  });
  // Envia uma mensagem no canal
  canal.send("ğŸ”¥ Estou online!");


  //Atualiza a mensagem a cada 5 minutos com a quantidade de posts e o ping do bot
  setInterval(() => {
    //Tempo em minutos
    const uptimeEmMinutos = Math.floor(client.uptime / 60000);
    canal.messages.fetch({ limit: 1 }).then((messages) => {
      messages.forEach((message) => {
        message.edit(`ğŸ”¥ Estou online! \n\nğŸ“Š Quantidade de posts: (ainda nÃ£o feito) \n\nğŸ“Š Ping: ${client.ws.ping}ms \n\nğŸ“Š Estou funcionando a: ${uptimeEmMinutos}m`);
      });
    });
  }, 30000);
});

// Cria uma nova coleÃ§Ã£o para armazenar os comandos do bot
client.slashCommands = new Discord.Collection(); 

// Importa e executa o arquivo handler.js, responsÃ¡vel por registrar os comandos do bot
require('./handler')(client); 

// Inicia a conexÃ£o do bot com o servidor do Discord usando o token de acesso armazenado no arquivo config.json
client.login(config.TOKEN); 